name: Test and Release

env:
  # Sync with .changeset/config.json:baseBranch
  MAIN_REF: refs/heads/main
  # Use custom PAT for changesets action
  GH_TOKEN: ${{ secrets.GA_TOKEN }}
  # Check if this is a tag push
  IS_TAG: ${{ startsWith(github.ref, 'refs/tags/') }}

on:
  push:
    tags:
      - "v*"

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  test-and-release:
    name: Test and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable corepack
        run: corepack enable

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 24.5
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run -r build

      - name: Test packages
        run: pnpm run -r test

      - name: Capture new release versions
        if: ${{ env.IS_TAG == 'true' }}
        run: |
          if pnpx @changesets/cli status --output=release.json; then
            echo "RELEASE=Version $(jq -r '.releases[0].newVersion' release.json)" >> "$GITHUB_ENV"
            # For monorepo, replace with:
            # echo "RELEASE=Release $(jq -r '.releases | map(.name + "@" + .newVersion) | join(", ")' release.json)" >> "$GITHUB_ENV"
            rm release.json
          fi

      - name: Create Release Pull Request or Publish to npm
        if: ${{ env.IS_TAG == 'true' }}
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
          title: ${{ env.RELEASE }}
          commit: ${{ env.RELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
